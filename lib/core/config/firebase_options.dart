// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:marketinya/core/config/service_locator.dart';
import 'package:marketinya/core/models/secrets_response.dart';
import 'package:marketinya/core/repositories/vault_repository.dart';

enum FirebaseEnvironment { wip, prod }

class DefaultFirebaseOptions {
  static FirebaseEnvironment _environment = FirebaseEnvironment.wip;

  static void setEnvironment(FirebaseEnvironment environment) {
    _environment = environment;
  }

  static FirebaseEnvironment get currentEnvironment => _environment;

  static FirebaseOptions get currentPlatform {
    if (!kIsWeb) {
      throw UnsupportedError('Only web platform is supported');
    }

    final secrets = _getSecrets();

    return switch (_environment) {
      FirebaseEnvironment.wip => _createWipOptions(secrets),
      FirebaseEnvironment.prod => _createProdOptions(secrets),
    };
  }

  static FirebaseOptions _createWipOptions(SecretsResponse secrets) {
    return FirebaseOptions(
      apiKey: secrets.wipWebFirebaseApiKey,
      appId: secrets.wipWebFirebaseAppId,
      messagingSenderId: secrets.wipWebFirebaseMessagingSenderId,
      projectId: secrets.wipWebFirebaseProjectId,
      authDomain: secrets.wipWebFirebaseAuthDomain,
      storageBucket: secrets.wipWebFirebaseStorageBucket,
      measurementId: secrets.wipWebFirebaseMeasurementId,
    );
  }

  static FirebaseOptions _createProdOptions(SecretsResponse secrets) {
    return FirebaseOptions(
      apiKey: secrets.prodWebFirebaseApiKey,
      appId: secrets.prodWebFirebaseAppId,
      messagingSenderId: secrets.prodWebFirebaseMessagingSenderId,
      projectId: secrets.prodWebFirebaseProjectId,
      authDomain: secrets.prodWebFirebaseAuthDomain,
      storageBucket: secrets.prodWebFirebaseStorageBucket,
    );
  }

  static SecretsResponse _getSecrets() {
    final vaultRepository = getIt<VaultRepository>();
    final secrets = vaultRepository.secrets;
    if (secrets == null) {
      throw Exception('Vault secrets not loaded');
    }
    return secrets;
  }
}
